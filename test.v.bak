module test(clk, VGA_R,VGA_B,VGA_G,VGA_BLANK, VGA_SYNC, VGA_HS, VGA_VS, rst, VGA_CLK, HEX0, HEX1,
Button3, Button2, Button1, Button0, restart, cue);
input Button3, Button2, Button1, Button0;	//not important
input restart;															//Important
input clk, rst;														//Important
output [7:0] VGA_R, VGA_B, VGA_G;
output VGA_HS, VGA_VS, VGA_BLANK, VGA_CLK, VGA_SYNC;		//Important
output [6:0] HEX0, HEX1;	//not important
output [3:0] cue;		//not important

//--Global wires--//
wire [3:0] but; //buttons     //not important
wire [30:0] posX, posY;
wire [30:0] posL, posU, posD, posR;
wire done;
wire frame;
wire [7:0] score;
wire [7:0] VGA_R, VGA_B, VGA_G;           					//Important
reg [2:0] lev; //indicates which level will be played
reg play; //state to send graphics module						//Important
assign but[3:0] = {Button3, Button2, Button1, Button0}; //not important
assign frame = (posX == 0) && (posY == 0);					//Important
//--End--//

//--VGA Controller instantiation--//							//Important
wire CLK_108;
wire hblank, vblank, clkLine;

clock108(!rst, clk, CLK_108, locked);
H_SYNC(CLK_108, VGA_HS, hblank, clkLine, posX);
V_SYNC(clkLine, VGA_VS, vblank, posY);

assign VGA_CLK = CLK_108;
assign VGA_BLANK = VGA_VS&VGA_HS;
assign VGA_SYNC = 1'b0;
//--End--//																//Important

//--Other instantiations--//										//Important
graphics(posX, posY, posL, posU, posD, posR, play, VGA_R, VGA_B, VGA_G);
game(clk, !rst, start, frame, lev, but, posL, posU, posD, posR, score, cue);
score_display(score, HEX0, HEX1);    //not important
//--End--//																//Important







/* --GRAPHICS MODULE--
 * Directs graphics to screen from positions
 * Does so by setting colors for notes
 * 1024 rows
 * 1280 columns
 */
module graphics(posX, posY, L, U, D, R, play, VGA_R, VGA_B, VGA_G);				// Dont need all of these instantiation
input [30:0] posX, posY; //values for position of screen being painted (cursor) provided by vga controller
input [30:0] L, U, D, R; //vertical positions of four notes (one each column) provided by gameplay module  		//NOT Important	
input play;
output [7:0] VGA_R, VGA_B, VGA_G;              // Very Important

reg [7:0] VGA_R, VGA_B, VGA_G;					  // Very Important
wire noteL, noteU, noteD, noteR; //"boolean" for whether cursor is on each note
wire tarL, tarU, tarD, tarR; //"boolean" for whether cursor is on each target frame		//Important
wire onScreen;																									//Important
reg [30:0] posL, posU, posD, posR;

parameter 	sizeX = 80,
				sizeY = 80;
parameter	centerL = 150,
				centerU = 350,
				centerD = 550,
				centerR = 750;
parameter 	frameBottom = 1080;

always@(*) begin
	if (play) begin
		posL = L;
		posU = U;
		posD = D;
		posR = R;
	end else begin
		posL = 940;
		posU = 940;
		posD = 940;
		posR = 940;
	end
end


//--NOT TO SURE ABOUT THIS--//
//--Assign note booleans values--//
assign noteL = (posX > (centerL-(sizeX/2))) && (posX < (centerL+(sizeX/2))) && //x position is in the left column
				(posY > posL-sizeY) && (posY < posL); //y position is within the note
assign noteU = (posX > (centerU-(sizeX/2))) && (posX < (centerU+(sizeX/2))) && //x position is in the left column
				(posY > posU-sizeY) && (posY < posU); //y position is within the note
assign noteD = (posX > (centerD-(sizeX/2))) && (posX < (centerD+(sizeX/2))) && //x position is in the left column
				(posY > posD-sizeY) && (posY < posD); //y position is within the note
assign noteR = (posX > (centerR-(sizeX/2))) && (posX < (centerR+(sizeX/2))) && //x position is in the left column
				(posY > posR-sizeY) && (posY < posR); //y position is within the note
//--End--//


//-- LOGIC TO CHECK IF THE BLOCK IS IN THE TARGET BOX --//
//--Assign target booleans values--//
assign tarL = (((posX > 95) && (posX < 205)) && ((posY > 845) && (posY < 855))) || 
					(((posX > 95) && (posX < 105)) && ((posY > 845) && (posY < 955))) || 
					(((posX > 195) && (posX < 205)) && ((posY > 845) && (posY < 955))) ||
					(((posX > 95) && (posX < 205)) && ((posY > 945) && (posY < 955)));
assign tarU = (((posX > 295) && (posX < 405)) && ((posY > 845) && (posY < 855))) || 
					(((posX > 295) && (posX < 305)) && ((posY > 845) && (posY < 955))) || 
					(((posX > 395) && (posX < 405)) && ((posY > 845) && (posY < 955))) ||
					(((posX > 295) && (posX < 405)) && ((posY > 945) && (posY < 955)));
assign tarD = (((posX > 495) && (posX < 605)) && ((posY > 845) && (posY < 855))) || 
					(((posX > 495) && (posX < 505)) && ((posY > 845) && (posY < 955))) || 
					(((posX > 595) && (posX < 605)) && ((posY > 845) && (posY < 955))) ||
					(((posX > 495) && (posX < 605)) && ((posY > 945) && (posY < 955)));				
assign tarR = (((posX > 695) && (posX < 805)) && ((posY > 845) && (posY < 855))) || 
					(((posX > 695) && (posX < 705)) && ((posY > 845) && (posY < 955))) || 
					(((posX > 795) && (posX < 805)) && ((posY > 845) && (posY < 955))) ||
					(((posX > 695) && (posX < 805)) && ((posY > 945) && (posY < 955)));



assign onScreen = (posX < 1280)&&(posY < 1024);						//Important
//--End--//


																					//Important
//--Color picture on notes--//
always@(*) begin
	if ((noteL || tarL) && onScreen) begin
		VGA_R = 8'd255;
		VGA_G = 8'd0;
		VGA_B = 8'd0;
	end else if ((noteU || tarU) && onScreen) begin
		VGA_R = 8'd0;
		VGA_G = 8'd255;
		VGA_B = 8'd0;
	end else if ((noteD || tarD) && onScreen) begin
		VGA_R = 8'd0;
		VGA_G = 8'd0;
		VGA_B = 8'd255;
	end else if ((noteR || tarR) && onScreen) begin
		VGA_R = 8'd255;
		VGA_G = 8'd255;
		VGA_B = 8'd0;
	end else if (onScreen) begin
		VGA_R = 8'd255;
		VGA_G = 8'd255;
		VGA_B = 8'd240;
	end else begin
		VGA_R = 8'd100;
		VGA_G = 8'd100;
		VGA_B = 8'd100;
	end
end
//--End--//

endmodule







//====================================//
//========DO NOT EDIT PAST HERE=======//
//====================================//
/* --VGA CONTROLLER MODULES--
 * Controls vga output syncs and clk
 * Written by Ben Shaffer and Grant Picker
 */
module H_SYNC(clk, hout, bout, newLine, Xcount);

input clk;
output hout, bout, newLine;
output [31:0] Xcount;
	
reg [31:0] count = 32'd0;
reg hsync, blank, new1;

always @(posedge clk) 
begin
	if (count <  1688)
		count <= Xcount + 1;
	else 
      count <= 0;
   end 

always @(*) 
begin
	if (count == 0)
		new1 = 1;
	else
		new1 = 0;
   end 

always @(*) 
begin
	if (count > 1279) 
		blank = 1;
   else 
		blank = 0;
   end

always @(*) 
begin
	if (count < 1328)
		hsync = 1;
   else if (count > 1327 && count < 1440)
		hsync = 0;
   else    
		hsync = 1;
	end

assign Xcount=count;
assign hout = hsync;
assign bout = blank;
assign newLine = new1;

endmodule


module V_SYNC(clk, vout, bout, Ycount);

input clk;
output vout, bout;
output [31:0]Ycount; 
	  
reg [31:0] count = 32'd0;
reg vsync, blank;

always @(posedge clk) 
begin
	if (count <  1066)
		count <= Ycount + 1;
   else 
            count <= 0;
   end 

always @(*) 
begin
	if (count < 1024) 
		blank = 1;
   else 
		blank = 0;
   end

always @(*) 
begin
	if (count < 1025)
		vsync = 1;
	else if (count > 1024 && count < 1028)
		vsync = 0;
	else    
		vsync = 1;
	end

assign Ycount=count;
assign vout = vsync;
assign bout = blank;

endmodule

//synopsys translate_off
`timescale 1 ps / 1 ps
//synopsys translate_on
module clock108 (areset, inclk0, c0, locked);

input     areset;
input     inclk0;
output    c0;
output    locked;

`ifndef ALTERA_RESERVED_QIS
 //synopsys translate_off
`endif

tri0      areset;

`ifndef ALTERA_RESERVED_QIS
 //synopsys translate_on
`endif

wire [0:0] sub_wire2 = 1'h0;
wire [4:0] sub_wire3;
wire  sub_wire5;
wire  sub_wire0 = inclk0;
wire [1:0] sub_wire1 = {sub_wire2, sub_wire0};
wire [0:0] sub_wire4 = sub_wire3[0:0];
wire  c0 = sub_wire4;
wire  locked = sub_wire5;
	 
altpll  altpll_component (
            .areset (areset),
            .inclk (sub_wire1),
            .clk (sub_wire3),
            .locked (sub_wire5),
            .activeclock (),
            .clkbad (),
            .clkena ({6{1'b1}}),
            .clkloss (),
            .clkswitch (1'b0),
            .configupdate (1'b0),
            .enable0 (),
            .enable1 (),
            .extclk (),
            .extclkena ({4{1'b1}}),
            .fbin (1'b1),
            .fbmimicbidir (),
            .fbout (),
            .fref (),
            .icdrclk (),
            .pfdena (1'b1),
            .phasecounterselect ({4{1'b1}}),
            .phasedone (),
            .phasestep (1'b1),
            .phaseupdown (1'b1),
            .pllena (1'b1),
            .scanaclr (1'b0),
            .scanclk (1'b0),
            .scanclkena (1'b1),
            .scandata (1'b0),
            .scandataout (),
            .scandone (),
            .scanread (1'b0),
            .scanwrite (1'b0),
            .sclkout0 (),
            .sclkout1 (),
            .vcooverrange (),
            .vcounderrange ());
defparam
    altpll_component.bandwidth_type = "AUTO",
    altpll_component.clk0_divide_by = 25,
    altpll_component.clk0_duty_cycle = 50,
    altpll_component.clk0_multiply_by = 54,
    altpll_component.clk0_phase_shift = "0",
    altpll_component.compensate_clock = "CLK0",
    altpll_component.inclk0_input_frequency = 20000,
    altpll_component.intended_device_family = "Cyclone IV E",
    altpll_component.lpm_hint = "CBX_MODULE_PREFIX=clock108",
    altpll_component.lpm_type = "altpll",
    altpll_component.operation_mode = "NORMAL",
    altpll_component.pll_type = "AUTO",
    altpll_component.port_activeclock = "PORT_UNUSED",
    altpll_component.port_areset = "PORT_USED",
    altpll_component.port_clkbad0 = "PORT_UNUSED",
    altpll_component.port_clkbad1 = "PORT_UNUSED",
    altpll_component.port_clkloss = "PORT_UNUSED",
    altpll_component.port_clkswitch = "PORT_UNUSED",
    altpll_component.port_configupdate = "PORT_UNUSED",
    altpll_component.port_fbin = "PORT_UNUSED",
    altpll_component.port_inclk0 = "PORT_USED",
    altpll_component.port_inclk1 = "PORT_UNUSED",
    altpll_component.port_locked = "PORT_USED",
    altpll_component.port_pfdena = "PORT_UNUSED",
    altpll_component.port_phasecounterselect = "PORT_UNUSED",
    altpll_component.port_phasedone = "PORT_UNUSED",
    altpll_component.port_phasestep = "PORT_UNUSED",
    altpll_component.port_phaseupdown = "PORT_UNUSED",
    altpll_component.port_pllena = "PORT_UNUSED",
    altpll_component.port_scanaclr = "PORT_UNUSED",
    altpll_component.port_scanclk = "PORT_UNUSED",
    altpll_component.port_scanclkena = "PORT_UNUSED",
    altpll_component.port_scandata = "PORT_UNUSED",
    altpll_component.port_scandataout = "PORT_UNUSED",
    altpll_component.port_scandone = "PORT_UNUSED",
    altpll_component.port_scanread = "PORT_UNUSED",
    altpll_component.port_scanwrite = "PORT_UNUSED",
    altpll_component.port_clk0 = "PORT_USED",
    altpll_component.port_clk1 = "PORT_UNUSED",
    altpll_component.port_clk2 = "PORT_UNUSED",
    altpll_component.port_clk3 = "PORT_UNUSED",
    altpll_component.port_clk4 = "PORT_UNUSED",
    altpll_component.port_clk5 = "PORT_UNUSED",
    altpll_component.port_clkena0 = "PORT_UNUSED",
    altpll_component.port_clkena1 = "PORT_UNUSED",
    altpll_component.port_clkena2 = "PORT_UNUSED",
    altpll_component.port_clkena3 = "PORT_UNUSED",
    altpll_component.port_clkena4 = "PORT_UNUSED",
    altpll_component.port_clkena5 = "PORT_UNUSED",
    altpll_component.port_extclk0 = "PORT_UNUSED",
    altpll_component.port_extclk1 = "PORT_UNUSED",
    altpll_component.port_extclk2 = "PORT_UNUSED",
    altpll_component.port_extclk3 = "PORT_UNUSED",
    altpll_component.self_reset_on_loss_lock = "OFF",
    altpll_component.width_clock = 5;

endmodule